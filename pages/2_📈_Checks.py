import streamlit as st
import pandas as pd
import numpy as np

from utils.computations import PMT, compute_remaining_capital_after_y_years
from utils.gcp_connector import download_dataframe

st.set_page_config(page_title="üìà Checks", page_icon="üìà")


def create_additional_features(database_inputs: pd.DataFrame):
    real_estate_df = (
        database_inputs
        .copy()
        .assign(
            # section "input_buying_hypothesis"
            Frais_d_acquisition = lambda x: x["Frais d'acquisition (prct prix d'achat)"] * x["Prix d'achat"],
            Prix_acquisition = lambda x: x["Prix d'achat"] + x["Frais_d_acquisition"] + x["Travaux"],
            # section "input_financial_hypothesis"
            LTV = lambda x: (x["Prix_acquisition"] - x["Apport"]) / x["Prix_acquisition"],
            Montant_emprunt√© = lambda x: x["LTV"] * x["Prix_acquisition"],
            Mensualit√© = lambda x: PMT(C=x["Montant_emprunt√©"], n=x["Dur√©e de cr√©dit (ann√©e)"]*12, t=x["Taux d'emprunt"]),
            # section "input_market_hypothesis"
            capital_restant_d√ª = lambda x: - compute_remaining_capital_after_y_years(C=x["Prix_acquisition"], M=x["Mensualit√©"], t=x["Taux d'emprunt"], y=x["Dur√©e de cr√©dit (ann√©e)"]),
            valeur_de_sortie = lambda x: x["Valeur v√©nale"] * (1+ x["Market Value Growth"]) ** x["Dur√©e de d√©tention (ann√©e)"],
            frais_de_vente = lambda x: - x["Frais de vente (taux)"] * x["valeur_de_sortie"],
            valeur_nette_de_sortie = lambda x: x["valeur_de_sortie"] + x["frais_de_vente"] + x["capital_restant_d√ª"],
            # section "input_annual_revenue"
            Remboursements = lambda x: - x["Mensualit√©"] * 12,
            # section "input_recurring_charges"
            Frais_d_entretien = lambda x: x["Frais d'entretien (prct prix d'achat)"] * x["Prix d'achat"],
            Assurance_GLI_PNO = lambda x: x["Assurance (GLI, PNO) (prct loyer)"] * x['Loyer mensuel'] * 12,
            # section "input_operating_capex"
            TOTAL_Charges_R√©currantes = lambda x: x["Remboursements"] + x["Gestion locative"] + x["Comptabilit√©"] + x["Frais de copropri√©t√©"] + x["Taxe fonci√®re"] + x["Frais_d_entretien"] + x["Assurance_GLI_PNO"]
        )
        .rename(columns=lambda x: x.lower().replace(" ", "_").replace("'", "_"))
    )
    return real_estate_df


def build_yearly_cashflow_df(real_estate_df: pd.DataFrame, time_horizon: int = 30) -> pd.DataFrame:
    """
    This function builds a yearly cashflow dataframe from a real estate dataframe.
    It is used to check the financial feasibility of the investment.
    It is a yearly cashflow, with a row for each year of the time horizon and the following columns (sliced in different sections):
    Index:
    - year: from 0 to time_horizon
    
    Income:
    - rent: rent of previous year * (1 + real_estate_df.loc[0, "market_rent_growth"]), initialized with real_estate_df.loc[0, "rent"]
    - vacancy: rent of the year * real_estate_df.loc[0, "vacancy"]
    - unpaied_rent: rent of the year * real_estate_df.loc[0, "unpaied_rent"]
    - gross_effective_revenues: sum of rent, vacancy and unpaied_rent
    
    Recurring charges: (algebric values so always negative)
    - gestion_locative: real_estate_df.loc[0, "gestion_locative"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - comptabilit√©: real_estate_df.loc[0, "comptabilit√©"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - frais_de_copropri√©t√©: real_estate_df.loc[0, "frais_de_copropri√©t√©"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - taxe_fonci√®re: real_estate_df.loc[0, "taxe_fonci√®re"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - frais_d_entretien: real_estate_df.loc[0, "frais_d_entretien"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - assurance_gli_pno: real_estate_df.loc[0, "assurance_gli_pno"] of the year * real_estate_df.loc[0, "property_tax_growth"]
    - total_charges_r√©currantes: sum of gestion_locative, comptabilit√©, frais_de_copropri√©t√©, taxe_fonci√®re, frais_d_entretien, assurance_gli_pno
    
    Net Operating Income:
    - net_operating_income: algebric sum of gross_effective_revenues and total_charges_r√©currantes
    
    Non Recurring charges: (algebric values so always negative)
    - apport: real_estate_df.loc[0, "apport"] only in the first year then 0
    - travaux_non_r√©currents: real_estate_df.loc[0, "travaux_non_r√©currents"] every "fr√©quence" years, 0 otherwise
    - total_non_recurring_charges: sum of apport and travaux_non_r√©currents
    
    Debt:
    - remboursements: real_estate_df.loc[0, "remboursements"] every year
    - cash_flow_after_debt: algebric sum of net_operating_income, total_non_recurring_charges and remboursements
    - cumulative_cash_flow_after_debt: cumulative sum of cash_flow_after_debt through the years

    Selling hypothesis:
    - valeur_v√©nale: previous year's valeur_v√©nale * (1 + real_estate_df["market_value_growth"]), initialized with real_estate_df.loc[0, "valeur_v√©nale"]
    - valeur_v√©nale_√†_la_vente: valeur_v√©nale only in the selling year, 0 otherwise
    - frais_de_vente: valeur_v√©nale_√†_la_vente * real_estate_df["frais_de_vente_(taux)"]
    - capital_restant_d√ª: - compute_remaining_capital_after_y_years(C=real_estate_df["prix_acquisition"], M=real_estate_df["mensualit√©"], t=real_estate_df["taux_d_emprunt"], y=year)
    - capital_residuel_√†_la_vente: capital_restant_d√ª only in the selling year, 0 otherwise
    - valeur_nette_de_sortie: algebric sum of valeur_v√©nale_√†_la_vente, frais_de_vente and capital_restant_d√ª_√†_la_vente only in the selling year, 0 otherwise

    Net Cash Flow:
    - net_cash_flow: algebric sum of cash_flow_after_debt and valeur_nette_de_sortie
    - cumulative_net_cash_flow: cumulative sum of net_cash_flow through the years
    """
    # Initialize the DataFrame with years
    yearly_cashflow_df = pd.DataFrame({'year': range(time_horizon + 1)})
    
    # Income
    yearly_cashflow_df['rent'] = real_estate_df.loc[0, 'loyer_mensuel'] * 12 * (1 + real_estate_df.loc[0, 'market_rent_growth']) ** yearly_cashflow_df['year']
    yearly_cashflow_df['vacancy'] = -yearly_cashflow_df['rent'] * real_estate_df.loc[0, 'vacancy']
    yearly_cashflow_df['unpaied_rent'] = -yearly_cashflow_df['rent'] * real_estate_df.loc[0, 'loyers_impay√©s']
    yearly_cashflow_df['gross_effective_revenues'] = yearly_cashflow_df['rent'] + yearly_cashflow_df['vacancy'] + yearly_cashflow_df['unpaied_rent']
    
    # Recurring charges
    recurring_charges = ['gestion_locative', 'comptabilit√©', 'frais_de_copropri√©t√©', 'taxe_fonci√®re', 'frais_d_entretien', 'assurance_gli_pno']
    for charge in recurring_charges:
        yearly_cashflow_df[charge] = -real_estate_df.loc[0, charge] * (1 + real_estate_df.loc[0, 'property_tax_growth']) ** yearly_cashflow_df['year']
    
    yearly_cashflow_df['total_charges_r√©currantes'] = yearly_cashflow_df[recurring_charges].sum(axis=1)
    
    # Net Operating Income
    yearly_cashflow_df['net_operating_income'] = yearly_cashflow_df['gross_effective_revenues'] + yearly_cashflow_df['total_charges_r√©currantes']
    
    # Non Recurring charges
    yearly_cashflow_df['apport'] = 0
    yearly_cashflow_df.loc[0, 'apport'] = -real_estate_df.loc[0, 'apport']
    
    frequency = real_estate_df.loc[0, 'fr√©quence']
    yearly_cashflow_df['travaux_non_r√©currents'] = np.where(yearly_cashflow_df['year'] % frequency == 0, -real_estate_df.loc[0, 'travaux_non_r√©current'], 0)
    
    yearly_cashflow_df['total_non_recurring_charges'] = yearly_cashflow_df['apport'] + yearly_cashflow_df['travaux_non_r√©currents']
    
    # Debt
    yearly_cashflow_df['remboursements'] = real_estate_df.loc[0, 'remboursements']
    yearly_cashflow_df['cash_flow_after_debt'] = yearly_cashflow_df['net_operating_income'] + yearly_cashflow_df['total_non_recurring_charges'] + yearly_cashflow_df['remboursements']
    yearly_cashflow_df['cumulative_cash_flow_after_debt'] = yearly_cashflow_df['cash_flow_after_debt'].cumsum()
    
    # Selling hypothesis
    yearly_cashflow_df['valeur_v√©nale'] = real_estate_df.loc[0, 'valeur_v√©nale'] * (1 + real_estate_df.loc[0, 'market_value_growth']) ** yearly_cashflow_df['year']
    
    selling_year = real_estate_df.loc[0, 'dur√©e_de_d√©tention_(ann√©e)']
    yearly_cashflow_df['valeur_v√©nale_√†_la_vente'] = np.where(yearly_cashflow_df['year'] == selling_year, yearly_cashflow_df['valeur_v√©nale'], 0)
    yearly_cashflow_df['frais_de_vente'] = -yearly_cashflow_df['valeur_v√©nale_√†_la_vente'] * real_estate_df.loc[0, 'frais_de_vente_(taux)']
    
    yearly_cashflow_df['capital_restant_d√ª'] = yearly_cashflow_df.apply(lambda row: -compute_remaining_capital_after_y_years(
        C=real_estate_df.loc[0, 'prix_acquisition'],
        M=real_estate_df.loc[0, 'mensualit√©'],
        t=real_estate_df.loc[0, 'taux_d_emprunt'],
        y=row['year']
    ), axis=1)
    
    yearly_cashflow_df['capital_residuel_√†_la_vente'] = np.where(yearly_cashflow_df['year'] == selling_year, yearly_cashflow_df['capital_restant_d√ª'], 0)
    yearly_cashflow_df['valeur_nette_de_sortie'] = np.where(
        yearly_cashflow_df['year'] == selling_year,
        yearly_cashflow_df['valeur_v√©nale_√†_la_vente'] + yearly_cashflow_df['frais_de_vente'] + yearly_cashflow_df['capital_residuel_√†_la_vente'],
        0
    )
    
    # Net Cash Flow
    yearly_cashflow_df['net_cash_flow'] = yearly_cashflow_df['cash_flow_after_debt'] + yearly_cashflow_df['valeur_nette_de_sortie']
    yearly_cashflow_df['cumulative_net_cash_flow'] = yearly_cashflow_df['net_cash_flow'].cumsum()
    
    return yearly_cashflow_df


def display_checks(real_estate_df: pd.DataFrame):
    yearly_cashflow_df = build_yearly_cashflow_df(real_estate_df)
    st.title("üìà Checks")
    st.markdown("""
    This page is used to check the financial feasibility of the investment.
    It is a yearly cashflow, with a row for each year of the time horizon and the following columns (sliced in different sections):
    """)
    st.dataframe(yearly_cashflow_df)

st.dataframe(st.session_state['real_estate_df'])
real_estate_df = create_additional_features(st.session_state['real_estate_df'].copy())
st.dataframe(real_estate_df)
display_checks(real_estate_df)